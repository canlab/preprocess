function [h1, h2, V] = logit_fit(RunA, RunB, tc, t,V0)% [h1, h2, VM] = logit_fit(RunA, tc, t)% Fit inverse logit function model to time course%% RunA : timecourse% tc :   timecourse% t     : time points% Initial values%V0 = [ 0.5 5 1 0.5 25 -1.5 0.5 50];V02 = [V0 V0]';% Find optimal valuesoptions = optimset('MaxFunEvals',100000,'Maxiter',1000000,'Display','Final');V = fminsearch(@msq_timecourse,V02,options,t,tc,RunA,RunB );% constraints% keep gains positive, so amplitude can drive neg signalV(1) = max(V(1),0);     % V1 (gain) must be +V(4) = max(V(4),0);     % V4 (gain) must be +V(7) = max(V(7),0);     % V1 (gains) must be at least % temporary constraints for HR fittingV(2) = min(V(2),180);     % rise (delay) must be no more than V(2) = max(V(2),120);     % rise (delay) must be at least V(5) = min(V(5),330);     % fall (delay) must be no more than V(5) = max(V(5),230);     % fall (delay) must be at least V(8) = min(V(8),400);     % V (delay) must be no more than V(8) = max(V(8),280);     % V (delay) must be at least %V(3) = max(V(3),0);     % V3 (initial amplitude) must be +%V(6) = min(V(6),0);     % V4 (gain) must be +V(1) = max(V(1),.04);     % V1 (gains) must be at least V(4) = max(V(4),.04);     % V1 (gains) must be at least % Use optimal values to fit hemodynamic response functionsh1 = il_hdmf_tw(t,V(1:9));h2 = [];    %il_hdmf_tw(t,V(9:16));return;