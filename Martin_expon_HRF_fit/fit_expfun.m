function [m,fit] = fit_expfun(y,TR,delta,varargin)% [m,fit] = fit_expfun(y,TR,delta,[nsec])%% inputs% y = data, % delta function (matrix form)% [opt] nsec, number of seconds to save in fit%% outputs% -------% returns fitted value, and % max amplitude (positive), time to peak, and half-height to half-height% time%% e.g., t1 = clock; [m,fit]=fit_expfun(y,1.5,c.trigs'); etime(clock,t1)% plot_logit_fits(y,fit,c.trigs');% defaultsnsec = 30;if length(varargin) > 0, nsec = varargin{1};,enddim = size(delta);condi = dim(2);% Fit inverse logit function model to time course% Initial valuesV0 = [ 0.5 5 1 0.5 25 -1.5 0.5 50];V02 = [];for i=1:condi,    V02 = [V02 V0];end;V02 = V02';t = 1:round(nsec./TR);% Find optimal valuesoptions = optimset('MaxFunEvals',100000,'Maxiter',10000000,'Display','Final');VM = fminsearch(@msq_tc,V02,options,t,y,delta);% Use optimal values to fit hemodynamic response functionsfit = zeros(round(nsec./TR),condi);VM;for i=1:condi,    h = il_hdmf_tw(t,VM(((i-1)*8+1):(i*8)));    fit(:,i) = h';end;% Find model parameters%% Height - h% Time to peak - p (in time units of TR secondis)% Width (at half peak) - w  m = zeros(3,condi);for i=1:condi,        [h,p] = max(fit(:,i));        [h2,p2] = min(fit(:,i));        if abs(h2)>abs(h), h = h2;, p = p2;, end    % if de-activation    v = (fit(:,i) >= h/2);    [a,b] = min(diff(v));    v(b+1:end) = 0;    w = sum(v);    m(1,i) = h;    m(2,i) = p;    m(3,i) = w;    endreturn