function [m,fit] = fit_exp2(y,TR,delta,varargin)% [m,fit] = fit_expfun(y,TR,delta,[nsec])%% inputs% y = data, % delta function (matrix form)% [opt] nsec, number of seconds to save in fit%% outputs% -------% returns fitted value, and % max amplitude (positive), time to peak, and half-height to half-height% time%% e.g., t1 = clock; [m,fit]=fit_expfun(y,1.5,c.trigs'); etime(clock,t1)% plot_logit_fits(y,fit,c.trigs');% defaultsnsec = 30;if length(varargin) > 0, nsec = varargin{1};,enddim = size(delta);condi = dim(2);% Fit inverse logit function model to time course% Initial valuesV0 = [ 0.5 5 1 0.5 20 0.5 50];LB = [0.1 3 0 0.1 10 0.1 40];UB = [4 15 4 4 30 Inf 60];V02 = [];LB2 = [];UB2 = [];for i=1:condi,    V02 = [V02 V0];    LB2 = [LB2 LB];    UB2 = [UB2 UB];end;V02 = V02';t = 1:round(nsec./TR);%%%RunA = delta(:,1);RunB = delta(:,2);% Find optimal valuesoptions = optimset('MaxFunEvals',100000,'Maxiter',100000,'TolX',1e-6,'TolFun',1e-6,'Display','Final');% VM = lsqnonlin('fitfun2',V02,LB,UB,options,RunA,RunB,t,y');VM = lsqnonlin('fitfun_logit',V02,LB,UB,options,delta,t,y');% Use optimal values to fit hemodynamic response functionsfit = zeros(round(nsec./TR),condi);VM;for i=1:condi,    h = il_hdmf_tw2(t,VM(((i-1)*7+1):(i*7)));    fit(:,i) = h';end;% Find model parameters%% Height - h% Time to peak - p (in time units of TR secondis)% Width (at half peak) - w  m = zeros(3,condi);for i=1:condi,    fit(:,i) = fit(:,i) - fit(1,i);    [h,p] = max(fit(:,i));        [h2,p2] = min(fit(:,i));        if abs(h2)>abs(h), h = h2;, p = p2;, end    % if de-activation    v = (fit(:,i) >= h/2);    [a,b] = min(diff(v));    v(b+1:end) = 0;    w = sum(v);    m(1,i) = h;    m(2,i) = p;    m(3,i) = w;    endreturn