% Looks for outputs of canlab_preproc_2012
% Creates noise_model_1.mat that stores SPM-style R matrix containing:
%   spikes from scn_spike_id (?)
%   realignment parameters (6)
%   squared realignment parameters (6)
%   derivatives of realignment parameters (6)
%   squared derivatives of realignment parameters (6) 
% These are found in R{1} and R{2} of Nuisance_covariates_R.mat, unconcatenated,
% and redundant spikes are removed.
%
% To use, make a copy of this script and put it in your study's Imaging
% or scripts directory, remove the .txt extension, then modify the variables 
% in the demarcated part at the top of the script (and anything else, if need be).
%
% Requires wagerlab repository on path.
%


clear
startwd = pwd;


%% SETUP (this stuff will need to be fitted to a study)
%-------------------------------------------------------
% will create <funcdir>/<outdirname>/<outfilename>.mat
outfilename = 'noise_model_1';
outdirname = 'spm_modeling';

%%% use the following lines if script not run from Imaging directory:
% imagingdir = '/data/projects/wagerlab/labdata/current/Liz_political/Imaging';
% cd(imagingdir);

% get cell array of subjects
% subs = filenames(fullfile(imagingdir, 'ilcp[0-9]*[0-9]'),'absolute');
subs = filenames(fullfile(imagingdir, 'MNS*'),'absolute');

% assumes <subdir>/qc_images/scn_session_spike_id_output.mat

% a wildcard to capture all functional data directories
% (path starts at <subdir>)
funcwc = 'Functional/Preprocessed/Run*/swra*.nii';
%-------------------------------------------------------

%%% (you shouldn't need to modify anything below)


%% NUISANCE REGRESSORS
fprintf('... MAKING NUISANCE FILES (spikes + motion)\n')
for s = 1:numel(subs)
    fprintf('... WORKING on %s\n',subs{s});
    
    % get directory names and run lengths for functional files
    funcfiles = filenames(fullfile(subs{s},funcwc));
    if isempty(funcfiles)
        warning('No functionals found') %#ok
        continue
    else
        for r=1:numel(funcfiles)
            funcdir{r} = fileparts(funcfiles{r}); %#ok
            [ignore t] = system(sprintf('fslval %s dim4',funcfiles{r}));
            vols(r) = str2num(deblank(t));
        end
    end    
   
    % load nuisance mat
    try
        funcdirsdir = fileparts(funcdir{1});
        nuisance = load(fullfile(funcdirsdir,'Nuisance_covariates_R.mat'));
    catch exc
        warning('Failed to load Nuisance_covariates_R.mat') %#ok
        continue
    end
    
    nfunc = numel(funcfiles);
    nR = numel(nuisance.R{1}) - 1;
    if nfunc ~= nR
        warning('Number of funcfiles (%d) does not match number of cells in R{1} (%d): skipping',nfunc,nR)
        continue
    end

    
    for r=1:numel(funcfiles)
        % determine output file
        dout = fullfile(funcdir{r},outdirname);
        if ~exist(dout,'dir'), mkdir(dout); end
        fout = fullfile(dout,outfilename);        

        % get spikes for run r
        spikes = nuisance.R{1}{r};
        % remove duplicate spikes
        uniquespikes = diag(any(spikes,2));
        uniquespikes = uniquespikes(:,any(uniquespikes));
        
        % get motion for run r
        motion = nuisance.R{2}{r};
        
        % save R matrix
        R = [motion uniquespikes];
        try 
            fprintf('... WRITING %s\n',fout)
            save(fout,'R');
        catch exc
            disp(getReport(exc,'extended'))
            warning('Could not write %s',fout);  %#ok
        end
        
        % clean up
        clear spikes motion R
    end
end

cd(startwd);
